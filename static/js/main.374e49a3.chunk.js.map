{"version":3,"sources":["components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","login","setState","showLoginForm","onSubmit","event","state","username","trim","length","authenticated","preventDefault","onInputChange","value","target","name","this","onChange","type","className","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RA8DeA,G,wDAzDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,MAAQ,WACN,EAAKC,SAAS,CAACC,eAAe,KAVb,EAanBC,SAAW,SAACC,GACN,EAAKC,MAAMC,SAASC,OAAOC,OAAS,GACtC,EAAKP,SAAS,CAACQ,eAAe,IAEhCL,EAAMM,kBAjBW,EAoBnBC,cAAgB,SAACP,GACf,IAAMQ,EAAQR,EAAMS,OAAOD,MACrBE,EAAOV,EAAMS,OAAOC,KAC1B,EAAKb,SAAL,eAAgBa,EAAOF,KArBvB,EAAKP,MAAQ,CACXC,SAAU,GACVJ,eAAe,EACfO,eAAe,GALA,E,qDA4BjB,OAAMM,KAAKV,MAAMI,eAAkBM,KAAKV,MAAMH,cAE1C,6BACE,0BAAMC,SAAUY,KAAKZ,UACnB,4CACA,2BACEW,KAAK,WACLF,MAAOG,KAAKV,MAAMC,SAClBU,SAAYD,KAAKJ,gBACV,6BACT,4BAAQM,KAAK,UAAb,WAOJ,6BACE,yBAAKC,UAAU,eACZH,KAAKV,MAAMI,cAAgBM,KAAKV,MAAMC,SACvC,4BAAQa,QAASJ,KAAKf,OAAtB,UAEF,8C,GApDSoB,IAAMC,Y,MCSVC,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,QCKcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.374e49a3.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Home.css\";\n\nclass Home extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      showLoginForm: false,\n      authenticated: false,\n    };\n  }\n\n  login = () => {\n    this.setState({showLoginForm: true});\n  }\n\n  onSubmit = (event) => {\n    if (this.state.username.trim().length > 0) {\n      this.setState({authenticated: true});\n    }\n    event.preventDefault();\n  }\n\n  onInputChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({[name]: value});\n  }\n\n  render() {\n\n    if ((!this.state.authenticated) && this.state.showLoginForm) {\n      return(\n        <div>\n          <form onSubmit={this.onSubmit}>\n            <label>Username:</label>\n            <input\n              name=\"username\"\n              value={this.state.username}\n              onChange = {this.onInputChange}\n            ></input><br></br>\n            <button type=\"submit\">Login</button>\n          </form>\n        </div>\n      );\n    }\n    else {\n      return(\n        <div>\n          <div className=\"loginButton\">\n            {this.state.authenticated ? this.state.username :\n            <button onClick={this.login}>Login</button>}\n          </div>\n          <div>Homepage</div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport Home from './components/Home';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}